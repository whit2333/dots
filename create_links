#!/bin/bash

# This scripts creates all the links in the home directory

files=("bash/.bashrc"
       "bash/.inputrc"
       "bash/.bash_aliases"
       "tmux/.tmux.conf"
       "ssh/.ssh"
       "vim/.vim"
       "vim/.vimrc"
       "git/.gitconfig"
       "root/.root"
       "root/.rootlogon.C"
       "root/.rootlogon.py"
       "root/.rootlibconfig.C"
       "root/.rootrc"
       "task/.task"
       "task/.taskrc"
       )

dots_dir=$HOME/dots
backup_dir=$(mktemp -d -p $dots_dir)
if [[ $? != 0 ]] ; then
   echo "error: Failed to create backup directory in $dots_dir"
fi
echo "Created backup directory $backup_dir" 

link_file() {
   # Utility function to link file
   # If file exists it is backed up in the tmp directory
   # First argument is the file
   curdir=$(pwd)
   cd $HOME
   copyfiles=
   if [[ -n "$1" ]] ; then
      file_name=$(basename $1)
      dir_name=$(dirname $1)
      if [[ -e "$file_name" ]] ; then

         # check if file linke is a directory
         if [[ -d $file_name ]] ; then
            # compare the existing directory contents with the linking directory
            contents=$(ls $file_name)
            #echo "$file_name is a directory with contents"
            #echo $contents
            contents2=$(ls $dots_dir/$1/)
            #echo $contents2
            contents3=$(echo $contents $contents2 | sed 's/ /\n/g' |  sort | uniq -u)
            contents4=$(echo $contents3 $contents2 | sed 's/ /\n/g' |  sort | uniq -u)
            echo "Need to copy $contents4"
            copyfiles=$contents4
         fi
         mkdir -p $backup_dir/$dir_name
         mv $file_name $backup_dir/$1
      fi
      #echo "ln -s $dots_dir/$1 $file_name"
      ln -s $dots_dir/$1 $file_name

      # copy (uniq) existing files into directory
      if [[ -n "$copyfiles" ]] ; then
         for cfile in $copyfiles ; do 
            echo "copying $cfile"
            cp -r $backup_dir/$1/$cfile $file_name/.
         done
      fi
   fi
   cd $curdir
}


for afile in "${files[@]}" 
do
   read -p "Link $afile? " yn
   case $yn in
      [Yy]* ) #echo "linking $afile";
              link_file $afile;; 
          * ) echo "... skipping $afile";;
   esac
done

